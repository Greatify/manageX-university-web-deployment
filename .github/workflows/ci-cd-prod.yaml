name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      deploy_password:
        description: 'Enter deployment password'
        required: true
        type: string

      re_tag:
        description: 'Enter a new tag to re-tag the staging Docker image for production deployment'
        required: false
        type: string

      prod_choice:
        description: 'Deploy To University Production'
        required: false
        type: boolean
        default: false
      # gulbarga_choice:
      #   description: 'Deploy To Gulbarga Production'
      #   required: false
      #   type: boolean
      #   default: false
      full_deploy:
        description: 'Build New Image and Deploy to Production & Gulbarga'
        required: false
        type: boolean
        default: false
      deploy_branch:
        description: 'Enter branch name to deploy'
        required: false
        type: string
      prod_tag:
        description: 'Tag for the image [e.g: Version-1.0 , HotFix-MNX8]'
        required: false
        type: string

      use_self_hosted_runner:
        description: 'Run on self-hosted runner instead of default runner?'
        required: true
        type: boolean
        default: false




concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:        
  Authentication:
    name: Authentication
    runs-on: ${{ github.event.inputs.use_self_hosted_runner == 'true' && 'self-hosted' || 'ubuntu-24.04-arm' }}
    steps:
      - name: Verify deployment password
        id: password-check
        run: |
          CORRECT_PASSWORD="${{ secrets.DEPLOY_PASSWORD }}"
          INPUT_PASSWORD="${{ github.event.inputs.deploy_password }}"
          
          if [[ "$INPUT_PASSWORD" != "$CORRECT_PASSWORD" ]]; then
            echo "::error::Invalid deployment password"
            exit 1
          fi
          echo "Password verified successfully"

      - name: Slack Notification on Wrong Password
        if: steps.password-check.outcome == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: managex-university
          text: |
            🚨 *Unauthorized Production Deployment Attempt*
            User: @${{ github.actor }} | Status: Failed - Invalid Password
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  Docker-Build:
    name: Docker Build
    runs-on: ${{ github.event.inputs.use_self_hosted_runner == 'true' && 'self-hosted' || 'ubuntu-24.04-arm' }}
    needs: [Authentication]
    if: github.event.inputs.full_deploy == 'true'
    environment: production
    timeout-minutes: 30
    strategy:
      matrix:
        node-version: [18.x]
      max-parallel: 4
      fail-fast: true
    outputs:
      commit_sha: ${{ steps.get-commit-sha.outputs.commit_sha }} 
    steps:
      - name: Checkout CodeBase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: '${{ github.event.inputs.deploy_branch }}'
          repository: 'Greatify/manageX-university-web'
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}

      - name: Get Commit SHA
        id: get-commit-sha
        run: |
         echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: |
            --debug
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
          config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]
            [worker.oci]
              max-parallelism = 12
  
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          docker system prune -af
          df -h 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION_PROD }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Sanitize tag
        id: sanitize-tag
        run: |
          # Use tr command to explicitly replace spaces with hyphens
          SANITIZED_TAG=$(echo "${{ github.event.inputs.prod_tag }}" | tr ' ' '-')
          echo "Original tag: ${{ github.event.inputs.prod_tag }}"
          echo "After space replacement: ${SANITIZED_TAG}"
          # Now remove any other unwanted characters while preserving hyphens
          SANITIZED_TAG=$(echo "${SANITIZED_TAG}" | tr -cd 'a-zA-Z0-9-.')
          echo "Final sanitized tag: ${SANITIZED_TAG}"
          echo "sanitized_tag=${SANITIZED_TAG}" >> $GITHUB_OUTPUT

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.get-commit-sha.outputs.commit_sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push PHP Laravel image to ECR
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_PROD }}:prod-${{ steps.get-commit-sha.outputs.commit_sha }}-${{ steps.sanitize-tag.outputs.sanitized_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          platforms: linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            PHP_VERSION=8.3

      - name: Move new cache to cache directory
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save image tag to file
        run: |
          echo "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_PROD }}:prod-${{ steps.get-commit-sha.outputs.commit_sha }}-${{ steps.sanitize-tag.outputs.sanitized_tag }}" > laravel_image_tag.txt

      - name: Upload image tag files
        uses: actions/upload-artifact@v4
        with:
          name: image-tags
          path: |
            laravel_image_tag.txt
          retention-days: 1
          if-no-files-found: error

      - name: Notify on Docker Build Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: managex-university
          author_name: University Production Docker Build Status
          text: |
            [❌] University Production Docker Build: Failed
            Commit: ${{ steps.get-commit-sha.outputs.commit_sha }} | By: @${{ github.actor }}
            Message: ${{ github.event.inputs.prod_tag }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  ReTag-Image:
    name: ReTag Image
    runs-on: ${{ github.event.inputs.use_self_hosted_runner == 'true' && 'self-hosted' || 'ubuntu-24.04-arm' }}
    needs: [Authentication]
    if: github.event.inputs.full_deploy == 'false' && github.event.inputs.re_tag != ''
    environment: production
    outputs:
      commit_sha: ${{ steps.get-commit-sha.outputs.commit_sha }}
      retagged_image: ${{ steps.retag-image.outputs.retagged_image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0
          
      - name: Get Commit SHA from existing image
        id: get-commit-sha
        run: |
          # Extract commit SHA from the existing image tag
          EXISTING_IMAGE=$(yq '.spec.template.spec.containers[0].image' k8s/base/deployment/base-deploy.yaml)
          # Extract the commit SHA part from the image tag (format: registry/repo:commit_sha-tag)
          COMMIT_SHA=$(echo "$EXISTING_IMAGE" | grep -oE '([0-9a-f]{40})' | head -1)
          if [ -z "$COMMIT_SHA" ]; then
            echo "::error::Could not extract commit SHA from image tag: $EXISTING_IMAGE"
            exit 1
          fi
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "Using commit SHA: $COMMIT_SHA"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION_PROD }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Sanitize re_tag
        id: sanitize-retag
        run: |
          SANITIZED_TAG=$(echo "${{ github.event.inputs.re_tag }}" | tr ' ' '-' | tr -cd 'a-zA-Z0-9-.')
          echo "sanitized_retag=${SANITIZED_TAG}" >> $GITHUB_OUTPUT

      - name: Get existing image from deployment
        id: get-existing-image
        run: |
          EXISTING_IMAGE=$(yq '.spec.template.spec.containers[0].image' k8s/base/deployment/base-deploy.yaml)
          echo "existing_image=${EXISTING_IMAGE}" >> $GITHUB_OUTPUT

      - name: Re-tag and push image to ECR
        id: retag-image
        run: |
          # Use the commit SHA from the existing image and the new sanitized tag
          NEW_TAG="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_PROD }}:prod-${{ steps.get-commit-sha.outputs.commit_sha }}-${{ steps.sanitize-retag.outputs.sanitized_retag }}"
          docker pull ${{ steps.get-existing-image.outputs.existing_image }}
          docker tag ${{ steps.get-existing-image.outputs.existing_image }} ${NEW_TAG}
          docker push ${NEW_TAG}
          echo "retagged_image=${NEW_TAG}" >> $GITHUB_OUTPUT

      - name: Save retagged image to file
        run: |
          echo "${{ steps.retag-image.outputs.retagged_image }}" > laravel_image_tag.txt

      - name: Upload retagged image tag file
        uses: actions/upload-artifact@v4
        with:
          name: image-tags
          path: laravel_image_tag.txt
          retention-days: 1
          if-no-files-found: error

  Deploy-to-Production:
    name: Deploy to Production
    needs: [Docker-Build, ReTag-Image]
    runs-on: ${{ github.event.inputs.use_self_hosted_runner == 'true' && 'self-hosted' || 'ubuntu-24.04-arm' }}
    if: |
      always() && 
      github.event.inputs.prod_choice == 'true' && 
      ((github.event.inputs.full_deploy == 'true' && (needs.Docker-Build.result == 'success' )) ||
       (github.event.inputs.re_tag != '' && (needs.ReTag-Image.result == 'success')))
    environment: production
    env:
      CLOUDFRONT_DISTRIBUTION: ${{ secrets.PROD_CLOUDFRONT_DISTRIBUTION }} 
      URL: ${{ vars.PROD_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0

      - name: Download image tag files
        uses: actions/download-artifact@v4
        if: github.event.inputs.full_deploy == 'true' || github.event.inputs.re_tag != ''
        with:
          name: image-tags
          path: .
  
      - name: Set image tags as environment variables
        if: github.event.inputs.full_deploy == 'true' || github.event.inputs.re_tag != ''
        run: |
          echo "LARAVEL_IMAGE=$(<laravel_image_tag.txt)" >> $GITHUB_ENV

      - name: Update PHP Laravel deployment image tag and change cause
        run: |
          yq -i '.spec.template.spec.containers[0].image = "${{ env.LARAVEL_IMAGE }}"' k8s/base/deployment/base-deploy.yaml
          yq -i '.spec.template.metadata.annotations."kubernetes.io/change-cause" = "Updated to ${{ env.LARAVEL_IMAGE }}"' k8s/base/deployment/base-deploy.yaml
          yq -i '.spec.jobTemplate.spec.template.spec.containers[0].image = "${{ env.LARAVEL_IMAGE }}"' k8s/base/cronjob/base-cronjob.yaml

      - name: Commit and Push Image Tags
        run: |
          git pull origin main
          git config --local user.email "suriyanarayanan.s@greatify.ai"
          git config --local user.name "surya1005"
          git add -f k8s/base/deployment/base-deploy.yaml k8s/base/cronjob/base-cronjob.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit, skipping commit and push"
          else
            echo "Changes detected, committing and pushing"
            git commit -m "Update deployment image and change cause [Automated] For Production Environment"
            git push origin main
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION_PROD }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ secrets.PROD_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION_PROD }}

      - name: Apply K8s Manifests To Production With Validation
        run: |
          kubectl apply -k k8s/overlays/prod --validate=true
          kubectl rollout status deployment/managex-university-production -n managex-university-production --timeout=300s

      - name: CloudFront Invalidation
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} --paths "/*" --query 'Invalidation.Id' --output text)
          echo "Created invalidation: $INVALIDATION_ID"
          aws cloudfront wait invalidation-completed --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} --id $INVALIDATION_ID
          
      - name: Slack Notification On Deployment Status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: managex-university
          author_name: University Production Deployment Status
          text: |
            [${{ job.status == 'success' && '✅' || '❌' }}] University Production Deployment: ${{ job.status }}
            Commit: ${{ github.event.inputs.full_deploy == 'true' && needs.Docker-Build.outputs.commit_sha || needs.ReTag-Image.outputs.commit_sha }} | By: @${{ github.actor }}
            Message: ${{ github.event.inputs.prod_tag }}
            *URL:* ${{env.URL}}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  

  # Deploy-to-Gulbarga:
  #   name: Deploy to Gulbarga
  #   needs: 
  #     - Docker-Build
  #     - ReTag-Image
  #     - Deploy-to-Production
  #   if: |
  #     always() && 
  #     github.event.inputs.gulbarga_choice == 'true' && 
  #     ((github.event.inputs.full_deploy == 'true' && (needs.Docker-Build.result == 'success' )) ||
  #      (github.event.inputs.re_tag != '' && (needs.ReTag-Image.result == 'success'))) &&
  #     (github.event.inputs.prod_choice != 'true' || (needs.Deploy-to-Production.result == 'success'))
  #   runs-on: ${{ github.event.inputs.use_self_hosted_runner == 'true' && 'self-hosted' || 'ubuntu-24.04-arm' }}
  #   environment: gulbarga-production
  #   env:
  #     CLOUDFRONT_DISTRIBUTION: ${{ secrets.GULBARGA_CLOUDFRONT_DISTRIBUTION }}
  #     URL: ${{ vars.GULBARGA_URL }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         ref: 'main'
  #         fetch-depth: 0

  #     # These steps are only needed when deploying to Gulbarga without Production
  #     - name: Download image tag files (Gulbarga Only)
  #       uses: actions/download-artifact@v4
  #       if: (github.event.inputs.full_deploy == 'true' || github.event.inputs.re_tag != '') && 
  #           github.event.inputs.gulbarga_choice == 'true' && 
  #           github.event.inputs.prod_choice != 'true'
  #       with:
  #         name: image-tags
  #         path: .
    
  #     - name: Set image tags as environment variables (Gulbarga Only)
  #       if: (github.event.inputs.full_deploy == 'true' || github.event.inputs.re_tag != '') && 
  #           github.event.inputs.gulbarga_choice == 'true' && 
  #           github.event.inputs.prod_choice != 'true'
  #       run: |
  #         echo "LARAVEL_IMAGE=$(<laravel_image_tag.txt)" >> $GITHUB_ENV
  
  #     - name: Update PHP Laravel deployment image tag and change cause (Gulbarga Only)
  #       if: (github.event.inputs.full_deploy == 'true' || github.event.inputs.re_tag != '') && 
  #           github.event.inputs.gulbarga_choice == 'true' && 
  #           github.event.inputs.prod_choice != 'true'
  #       run: |
  #         yq -i '.spec.template.spec.containers[0].image = "${{ env.LARAVEL_IMAGE }}"' k8s/base/deployment/base-deploy.yaml
  #         yq -i '.spec.template.metadata.annotations."kubernetes.io/change-cause" = "Updated to ${{ env.LARAVEL_IMAGE }}"' k8s/base/deployment/base-deploy.yaml
  #         yq -i '.spec.jobTemplate.spec.template.spec.containers[0].image = "${{ env.LARAVEL_IMAGE }}"' k8s/base/cronjob/base-cronjob.yaml
  
  #     - name: Commit and Push Image Tags (Gulbarga Only)
  #       if: (github.event.inputs.full_deploy == 'true' || github.event.inputs.re_tag != '') && 
  #           github.event.inputs.gulbarga_choice == 'true' && 
  #           github.event.inputs.prod_choice != 'true'
  #       run: |
  #         git pull origin main
  #         git config --local user.email "suriyanarayanan.s@greatify.ai"
  #         git config --local user.name "surya1005"
  #         git add -f k8s/base/deployment/base-deploy.yaml k8s/base/cronjob/base-cronjob.yaml
  #         if git diff --cached --quiet; then
  #           echo "No changes to commit, skipping commit and push"
  #         else
  #           echo "Changes detected, committing and pushing"
  #           git commit -m "Update deployment image and change cause [Automated] For Gulbarga Only"
  #           git push origin main
  #         fi

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.GULBARGA_AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.GULBARGA_AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.GULBARGA_AWS_REGION }}

  #     - name: Update kube config
  #       run: aws eks update-kubeconfig --name ${{ secrets.GULBARGA_CLUSTER_NAME }} --region ${{ secrets.GULBARGA_AWS_REGION }}

  #     - name: Apply K8s  Manifests To Gulbarga Production With Validation
  #       run: |
  #         kubectl apply -k k8s/overlays/gulbarga --validate=true
  #         kubectl rollout status deployment/gulbarga-university-production -n gulbarga-university-production --timeout=300s

  #     - name: CloudFront Invalidation
  #       run: |
  #         INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} --paths "/*" --query 'Invalidation.Id' --output text)
  #         echo "Created invalidation: $INVALIDATION_ID"
  #         aws cloudfront wait invalidation-completed --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} --id $INVALIDATION_ID
          
  #     - name: Slack Notification On Deployment Status
  #       if: always()
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: ${{ job.status }}
  #         channel: managex-university
  #         author_name: Gulbarga Production Deployment Status
  #         text: |
  #           [${{ job.status == 'success' && '✅' || '❌' }}] Gulbarga Production Deployment: ${{ job.status }}
  #           Commit: ${{ github.event.inputs.full_deploy == 'true' && needs.Docker-Build.outputs.commit_sha || needs.ReTag-Image.outputs.commit_sha }} | By: @${{ github.actor }}
  #           Message: ${{ github.event.inputs.prod_tag }}
  #           *URL:* ${{env.URL}}
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}