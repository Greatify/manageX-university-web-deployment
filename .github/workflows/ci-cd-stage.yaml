name: Deploy to Staging

on:
  workflow_dispatch:
    inputs:
      deploy_password:
        description: 'Enter deployment password'
        required: true
        type: string

      deploy_branch:
        description: 'Enter branch name to deploy'
        required: true
        type: string
        
      stage_tag:
        description: 'Tag for the image [e.g: MNX-8-fix , Sprint40]'
        required: true
        type: string

      use_default_runner:
        description: 'Run on default runner instead of self-hosted?'
        required: true
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
        
jobs:        
  Authentication:
    name: Authentication
    runs-on: ${{ github.event.inputs.use_default_runner == 'true' && 'ubuntu-24.04-arm' || 'self-hosted' }}
    steps:
      - name: Verify deployment password
        id: password-check
        continue-on-error: true
        run: |
          CORRECT_PASSWORD="${{ secrets.DEPLOY_PASSWORD }}"
          INPUT_PASSWORD="${{ github.event.inputs.deploy_password }}"
          
          if [[ "$INPUT_PASSWORD" != "$CORRECT_PASSWORD" ]]; then
            echo "::error::Invalid deployment password"
            exit 1
          fi
          echo "Password verified successfully"

      - name: Slack Notification on Wrong Password
        if: steps.password-check.outcome == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: managex-university
          text: |
            üö® *Unauthorized Stage Deployment Attempt*
            User: @${{ github.actor }} | Status: Failed - Invalid Password
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  Docker-Build:
    name: Docker Build
    runs-on: ${{ github.event.inputs.use_default_runner == 'true' && 'ubuntu-24.04-arm' || 'self-hosted' }}
    needs: [Authentication]
    environment: stage
    timeout-minutes: 30 
    outputs:
      commit_sha: ${{ steps.get-commit-sha.outputs.commit_sha }}
    steps:
      - name: Checkout CodeBase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: '${{ github.event.inputs.deploy_branch }}'
          repository: 'Greatify/manageX-university-web'
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}

      - name: Get Commit SHA
        id: get-commit-sha
        run: |
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Ensure Buildx is available
        run: |
          docker buildx use flamboyant_haslett || docker buildx create --name flamboyant_haslett --use
          docker buildx inspect --bootstrap
  
      - name: Prune Docker
        run: docker system prune -af 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Sanitize tag
        id: sanitize-tag
        run: |
          # Use tr command to explicitly replace spaces with hyphens
          SANITIZED_TAG=$(echo "${{ github.event.inputs.stage_tag }}" | tr ' ' '-')
          echo "Original tag: ${{ github.event.inputs.stage_tag }}"
          echo "After space replacement: ${SANITIZED_TAG}"
          # Now remove any other unwanted characters while preserving hyphens
          SANITIZED_TAG=$(echo "${SANITIZED_TAG}" | tr -cd 'a-zA-Z0-9-.')
          echo "Final sanitized tag: ${SANITIZED_TAG}"
          echo "sanitized_tag=${SANITIZED_TAG}" >> $GITHUB_OUTPUT

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.get-commit-sha.outputs.commit_sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push PHP Laravel image to ECR
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_STAGE }}:stage-${{ steps.get-commit-sha.outputs.commit_sha }}-${{ steps.sanitize-tag.outputs.sanitized_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          platforms: linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            PHP_VERSION=8.3
            USE_BADPROXY=true

      - name: Move new cache to cache directory
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save image tag to file
        run: |
          echo "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_STAGE }}:stage-${{ steps.get-commit-sha.outputs.commit_sha }}-${{ steps.sanitize-tag.outputs.sanitized_tag }}" > laravel_image_tag.txt

      - name: Upload image tag files
        uses: actions/upload-artifact@v4
        with:
          name: image-tags
          path: |
            laravel_image_tag.txt
          retention-days: 1
          if-no-files-found: error

      - name: Notify on Docker Build Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: managex-university
          author_name: University Stage Docker Build Status
          text: |
            [‚ùå] University Stage Docker Build: Failed
            Commit: ${{ steps.get-commit-sha.outputs.commit_sha }} | By: @${{ github.actor }}
            Message: ${{ github.event.inputs.stage_tag }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  Deploy-to-Stage:
    name: Stage Deployment
    runs-on: ${{ github.event.inputs.use_default_runner == 'true' && 'ubuntu-24.04-arm' || 'self-hosted' }}
    needs: [Docker-Build]  
    environment: stage
    timeout-minutes: 20
    env:
      CLOUDFRONT_DISTRIBUTION: ${{ secrets.STAGE_CLOUDFRONT_DISTRIBUTION }}
      URL: ${{ vars.STAGE_URL }}
    steps:
      - name: Checkout CodeBase
        uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0

      - name: Download image tag files
        uses: actions/download-artifact@v4
        with:
          name: image-tags
          path: .

      - name: Set image tags as environment variables
        run: |
          echo "LARAVEL_IMAGE=$(<laravel_image_tag.txt)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ secrets.STAGE_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Update PHP Laravel deployment image tag and change cause
        run: |
          yq -i '.spec.template.spec.containers[0].image = "${{ env.LARAVEL_IMAGE }}"' k8s/base/deployment/base-deploy.yaml
          yq -i '.spec.template.metadata.annotations."kubernetes.io/change-cause" = "Updated to ${{ env.LARAVEL_IMAGE }}"' k8s/base/deployment/base-deploy.yaml
          yq -i '.spec.jobTemplate.spec.template.spec.containers[0].image = "${{ env.LARAVEL_IMAGE }}"' k8s/base/cronjob/base-cronjob.yaml

      - name: Commit and Push Image Tags
        run: |
          git pull origin main
          git config --local user.email "suriyanarayanan.s@greatify.ai"
          git config --local user.name "surya1005"
          git add -f k8s/base/deployment/base-deploy.yaml k8s/base/cronjob/base-cronjob.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit, skipping commit and push"
          else
            echo "Changes detected, committing and pushing"
            git commit -m "Update deployment image and change cause [Automated] For Stage Environment"
            git push origin main
          fi

      - name: Apply K8s manifests to Stage Environment With Validation
        run: |
          kubectl apply -k k8s/overlays/stage --validate=true
          kubectl rollout status deployment/managex-university -n stage-managex-university --timeout=300s

      - name: CloudFront Invalidation
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} --paths "/*" --query 'Invalidation.Id' --output text)
          echo "Created invalidation: $INVALIDATION_ID"
          aws cloudfront wait invalidation-completed --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} --id $INVALIDATION_ID

      - name: Slack Notification on Deployment Status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: managex-university
          author_name: University Stage Deployment Status
          text: |
            [${{ job.status == 'success' && '‚úÖ' || '‚ùå' }}] University Stage Deployment: ${{ job.status }}
            Commit: ${{ needs.Docker-Build.outputs.commit_sha }} | By: @${{ github.actor }}
            Message: ${{ github.event.inputs.stage_tag }}
            *URL:* ${{env.URL}}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}